
pkg iridium:math:impl

use math (max sqrt sin cos)
use data (list:size list:new_sized list:fill)


func [dim](x) list:size x

var keys_of js "(x) => Object.keys(x)"
var compwise_op lambda(a b op) (
    if {[dim] a == undefined} set a (a)
    if {[dim] b == undefined} set b (b)
    var r list:fill list:new_sized max [dim] a [dim] b 0
    for i call keys_of (r) (
        setm r i call op (getm a {i % [dim] a} getm b {i % [dim] b})
    )
    return r
)

func [+](a b) call compwise_op (a b lambda(av bv) {av + bv})
func [-](a b) call compwise_op (a b lambda(av bv) {av - bv})
func [*](a b) call compwise_op (a b lambda(av bv) {av * bv})
func [/](a b) call compwise_op (a b lambda(av bv) {av / bv})
func [%](a b) call compwise_op (a b lambda(av bv) {av % bv})
func [~](x) (
    var r list:fill list:new_sized [dim] x 0
    for i call keys_of (r) (
        setm r i ~ getm x i
    )
    return r
)

func [len](x) (
    var sum 0
    for i range 0 [dim] x (
        set sum {sum + {getm x i * getm x i}}
    )
    return sqrt {sum / [dim] x}
)

func [unit](x) (
    var xn [len] x
    if {xn == 0} return x
    return {x [/] xn}
)

func [dot](a b) (
    var sum 0
    for n {a [*] b} (
        set sum {sum + n}
    )
    return sum
)

func [cross](a b) (
    assert {[dim] a == 3}
    assert {[dim] b == 3}
    return (
        {{{a [.y]} * {b [.z]}} - {{a [.z]} * {b [.y]}}}
        {{{a [.z]} * {b [.x]}} - {{a [.x]} * {b [.z]}}}
        {{{a [.x]} * {b [.y]}} - {{a [.y]} * {b [.x]}}}
    )
)

func [rotated](x angle) (
    assert {[dim] x == 2}
    var cos_a cos angle
    var sin_a sin angle
    return (
        {{cos_a * {x [.x]}} - {sin_a * {x [.y]}}}
        {{sin_a * {x [.x]}} + {cos_a * {x [.y]}}}
    )
)

func [.x](x) getm x 0
func [.y](x) getm x 1
func [.z](x) getm x 2
func [.w](x) getm x 3

macro [.](x components) (
    assert {getm components "length" == 1}
    set x eval x
    set components getm getm components 0 "content"
    var rl getm components "length"
    var r list:fill list:new_sized rl 0
    for c range 0 rl (
        if {getm components c == "x"} setm r c getm x 0
        else if {getm components c == "y"} setm r c getm x 1
        else if {getm components c == "z"} setm r c getm x 2
        else if {getm components c == "w"} setm r c getm x 3
        else error format "Vector component name '{0}' is not 'x', 'y', 'z' or 'w'!" (getm components c)
    )
    return r
)
